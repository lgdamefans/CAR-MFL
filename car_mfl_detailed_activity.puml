@startuml CAR-MFL详细活动图

' 使用标准活动图语法
|用户|
start
:设置参数 (algorithm=fedavgRAG, num_clients, img_clients, txt_clients, alpha等);

|主程序|
:解析命令行参数;
:初始化FedAvgInRAG引擎;
:设置随机种子;
:初始化wandb记录;

|FedAvgInRAG引擎|
:初始化FedAvgInRAG类;
:调用setup_clients()设置客户端;
:调用get_public_dset()获取公共数据集;

|服务器|
:初始化服务器模型;
:加载服务器数据集;
:初始化评估指标(AUC);

|多模态客户端|
:初始化多模态客户端;
:加载多模态数据集;

|仅图像客户端|
:初始化仅图像客户端(ClassificationTrainerRAG);
:加载图像数据集;
:设置模态类型为"image";

|仅文本客户端|
:初始化仅文本客户端(ClassificationTrainerRAG);
:加载文本数据集;
:设置模态类型为"text";

|公共数据集|
:加载MIMIC-CXR公共数据集;

|FedAvgInRAG引擎|
:开始通信轮次循环;
repeat
  |FedAvgInRAG引擎|
  :调用setup_rag()准备跨模态检索;

  |服务器|
  :将模型设置为评估模式;
  :将模型移至GPU;
  
  |公共数据集|
  :提供批次数据(图像、标签、文本、索引);
  
  |服务器|
  :提取图像特征向量;
  :提取文本特征向量;
  :收集所有特征向量和标签;
  
  |FedAvgInRAG引擎|
  :存储提取的特征向量(img_vec, txt_vec);
  :存储对应的标签和索引;
  :调用dispatch()分发模型;
  
  |服务器|
  :在服务器数据上训练模型;
  
  |多模态客户端|
  :接收模型;
  :直接在多模态数据上训练;
  
  |仅图像客户端|
  :接收模型;
  :调用generate_RAG_mapping()生成映射;
  
  |检索模块|
  :计算本地图像特征与全局特征的距离;
  if (使用标签精炼?) then (是)
    :找到Top-K最相似的特征向量;
    :使用Jaccard相似度进一步筛选最佳匹配;
  else (否)
    :找到最相似的特征向量;
  endif
  
  |仅图像客户端|
  :存储图像到文本的映射关系;
  :对每个训练批次:;
  :检索缺失的文本模态;
  :使用原始图像+检索文本训练;
  
  |仅文本客户端|
  :接收模型;
  :调用generate_RAG_mapping()生成映射;
  
  |检索模块|
  :计算本地文本特征与全局特征的距离;
  if (使用标签精炼?) then (是)
    :找到Top-K最相似的特征向量;
    :使用Jaccard相似度进一步筛选最佳匹配;
  else (否)
    :找到最相似的特征向量;
  endif
  
  |仅文本客户端|
  :存储文本到图像的映射关系;
  :对每个训练批次:;
  :检索缺失的图像模态;
  :使用原始文本+检索图像训练;
  
  |FedAvgInRAG引擎|
  :调用aggregrate()聚合模型;
  
  |服务器|
  :复制当前全局模型参数;
  :计算所有客户端的权重;
  :根据alpha参数调整单模态客户端权重;
  :对每个模型参数:;
  note right
    对于文本编码器参数:
    使用调整后的图像客户端权重
    
    对于图像编码器参数:
    使用调整后的文本客户端权重
    
    对于其他参数:
    使用正常权重
  end note
  :计算加权平均参数;
  :更新全局模型;
  
  |FedAvgInRAG引擎|
  :调用val()评估聚合模型;
  
  |服务器|
  :在验证集上评估模型;
  :计算AUC指标;
  :记录验证性能;
  
  |FedAvgInRAG引擎|
  :如果性能提升，保存最佳模型;
  :增加通信轮次计数;
  :保存日志;

repeat while (完成所有通信轮次?) is (否)

|FedAvgInRAG引擎|
:调用server.load_best()加载最佳模型;
:调用test()在测试集上评估;

|服务器|
:加载最佳模型;
:在测试集上评估最终性能;
:计算并输出最终AUC指标;

|主程序|
:记录最终结果到wandb;

|用户|
:查看实验结果;

stop

@enduml